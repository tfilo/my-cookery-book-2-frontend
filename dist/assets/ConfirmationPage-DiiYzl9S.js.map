{"version":3,"file":"ConfirmationPage-DiiYzl9S.js","sources":["../../src/pages/signIn/ConfirmationPage.tsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport * as yup from 'yup';\nimport { Api } from '../../openapi';\nimport { authApi } from '../../utils/apiWrapper';\nimport { formatErrorMessage } from '../../utils/errorMessages';\nimport Input from '../../components/ui/Input';\nimport Modal from '../../components/ui/Modal';\nimport Spinner from '../../components/ui/Spinner';\n\nconst schema = yup\n    .object({\n        username: yup\n            .string()\n            .trim()\n            .min(4, 'Musia byť minimálne 4 znaky')\n            .max(50, 'Musí byť maximálne 50 znakov')\n            .required('Povinná položka'),\n        key: yup.string().trim().max(36, 'Musí byť maximálne 36 znakov').required('Povinná položka')\n    })\n    .required();\n\nconst ConfirmationPage: React.FC = () => {\n    const methods = useForm<Api.ConfirmEmailRequest>({\n        resolver: yupResolver(schema)\n    });\n\n    const {\n        formState: { isSubmitting },\n        reset\n    } = methods;\n    const navigate = useNavigate();\n    const [error, setError] = useState<string>();\n    const [successfulConfirmation, setSuccessfulConfirmation] = useState(false);\n    const { username, key } = useParams();\n\n    useEffect(() => {\n        if (username && key) {\n            reset({ username: username, key: key });\n        }\n    }, [reset, username, key]);\n\n    const submitHandler = async (data: Api.ConfirmEmailRequest) => {\n        try {\n            await authApi.confirmEmail(data);\n            setSuccessfulConfirmation(true);\n        } catch (err) {\n            formatErrorMessage(err).then((message) => setError(message));\n        }\n    };\n    return (\n        <div className='row justify-content-center'>\n            <div className='col-lg-6 pt-3'>\n                <h1>Potvrdenie registrácie</h1>\n                <FormProvider {...methods}>\n                    <Form\n                        onSubmit={methods.handleSubmit(submitHandler)}\n                        noValidate\n                    >\n                        <p className='text-primary'>Pre dokončenie registrácie prosím zadajte prihlasovacie meno a registračný kľúč.</p>\n                        <Input\n                            name='username'\n                            label='Prihlasovacie meno'\n                            type='text'\n                        />\n                        <Input\n                            name='key'\n                            label='Registračný kľúč'\n                            type='text'\n                        />\n                        <Button\n                            variant='primary'\n                            type='submit'\n                        >\n                            Potvrdiť\n                        </Button>\n                        <Spinner show={isSubmitting} />\n                    </Form>\n                </FormProvider>\n            </div>\n            <Modal\n                show={!!error}\n                message={error}\n                type='error'\n                onClose={() => {\n                    setError(undefined);\n                }}\n            />\n            <Modal\n                show={successfulConfirmation}\n                message='Potvrdenie registrácie prebehlo úspešne.'\n                type='info'\n                onClose={() => {\n                    navigate('/signIn');\n                }}\n            />\n        </div>\n    );\n};\n\nexport default ConfirmationPage;\n"],"names":["schema","yup.object","yup.string","ConfirmationPage","methods","useForm","yupResolver","isSubmitting","reset","navigate","useNavigate","error","setError","useState","successfulConfirmation","setSuccessfulConfirmation","username","key","useParams","useEffect","submitHandler","data","authApi","err","formatErrorMessage","message","jsxs","jsx","FormProvider","Form","Input","Button","Spinner","Modal"],"mappings":"kJAaA,MAAMA,EAASC,EACH,CACJ,SAAUC,EACE,EACP,KACA,EAAA,IAAI,EAAG,6BAA6B,EACpC,IAAI,GAAI,8BAA8B,EACtC,SAAS,iBAAiB,EAC/B,IAAKA,EAAa,EAAA,KAAO,EAAA,IAAI,GAAI,8BAA8B,EAAE,SAAS,iBAAiB,CAC/F,CAAC,EACA,SAAS,EAERC,EAA6B,IAAM,CACrC,MAAMC,EAAUC,EAAiC,CAC7C,SAAUC,EAAYN,CAAM,CAAA,CAC/B,EAEK,CACF,UAAW,CAAE,aAAAO,CAAa,EAC1B,MAAAC,CAAA,EACAJ,EACEK,EAAWC,EAAY,EACvB,CAACC,EAAOC,CAAQ,EAAIC,WAAiB,EACrC,CAACC,EAAwBC,CAAyB,EAAIF,EAAAA,SAAS,EAAK,EACpE,CAAE,SAAAG,EAAU,IAAAC,CAAI,EAAIC,EAAU,EAEpCC,EAAAA,UAAU,IAAM,CACRH,GAAYC,GACNT,EAAA,CAAE,SAAAQ,EAAoB,IAAAC,EAAU,CAE3C,EAAA,CAACT,EAAOQ,EAAUC,CAAG,CAAC,EAEnB,MAAAG,EAAgB,MAAOC,GAAkC,CACvD,GAAA,CACM,MAAAC,EAAQ,aAAaD,CAAI,EAC/BN,EAA0B,EAAI,QACzBQ,EAAK,CACVC,EAAmBD,CAAG,EAAE,KAAME,GAAYb,EAASa,CAAO,CAAC,CAAA,CAEnE,EAEI,OAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,6BACX,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,gBACX,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAsB,wBAAA,CAAA,EAC1BA,EAAAA,IAACC,EAAc,CAAA,GAAGxB,EACd,SAAAsB,EAAA,KAACG,EAAA,CACG,SAAUzB,EAAQ,aAAagB,CAAa,EAC5C,WAAU,GAEV,SAAA,CAACO,EAAA,IAAA,IAAA,CAAE,UAAU,eAAe,SAAgF,mFAAA,EAC5GA,EAAA,IAACG,EAAA,CACG,KAAK,WACL,MAAM,qBACN,KAAK,MAAA,CACT,EACAH,EAAA,IAACG,EAAA,CACG,KAAK,MACL,MAAM,mBACN,KAAK,MAAA,CACT,EACAH,EAAA,IAACI,EAAA,CACG,QAAQ,UACR,KAAK,SACR,SAAA,UAAA,CAED,EACAJ,EAAAA,IAACK,EAAQ,CAAA,KAAMzB,CAAc,CAAA,CAAA,CAAA,CAAA,CAErC,CAAA,CAAA,EACJ,EACAoB,EAAA,IAACM,EAAA,CACG,KAAM,CAAC,CAACtB,EACR,QAASA,EACT,KAAK,QACL,QAAS,IAAM,CACXC,EAAS,MAAS,CAAA,CACtB,CACJ,EACAe,EAAA,IAACM,EAAA,CACG,KAAMnB,EACN,QAAQ,2CACR,KAAK,OACL,QAAS,IAAM,CACXL,EAAS,SAAS,CAAA,CACtB,CAAA,CACJ,EACJ,CAER"}