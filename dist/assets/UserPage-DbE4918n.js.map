{"version":3,"file":"UserPage-DbE4918n.js","sources":["../../src/pages/users/UserPage.tsx"],"sourcesContent":["import React, { useEffect, useState, useId } from 'react';\nimport { useNavigate, useParams } from 'react-router-dom';\nimport { useForm, SubmitHandler, FormProvider, Controller } from 'react-hook-form';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { Button, Form, Stack } from 'react-bootstrap';\nimport { Typeahead } from 'react-bootstrap-typeahead';\nimport * as yup from 'yup';\nimport { get } from 'lodash';\nimport { Api } from '../../openapi';\nimport { userApi } from '../../utils/apiWrapper';\nimport { formatErrorMessage } from '../../utils/errorMessages';\nimport { getRoleLabel } from '../../localisations/localisations';\nimport Input from '../../components/ui/Input';\nimport Modal from '../../components/ui/Modal';\nimport Spinner from '../../components/ui/Spinner';\nimport Checkbox from '../../components/ui/Checkbox';\n\ntype Roles = { value: Api.User.RoleEnum; name: string }[];\n\nexport interface UserForm extends Omit<Api.CreateUser | Api.UpdateUser, 'roles'> {\n    roles: Roles;\n    confirmPassword?: string;\n}\n\nconst roleOptions = [\n    { value: Api.User.RoleEnum.ADMIN, name: 'Administrátor' },\n    {\n        value: Api.User.RoleEnum.CREATOR,\n        name: 'Tvorca obsahu'\n    }\n];\n\nconst schema = yup\n    .object({\n        username: yup\n            .string()\n            .trim()\n            .min(4, 'Musia byť minimálne 4 znaky')\n            .max(50, 'Musí byť maximálne 50 znakov')\n            .matches(/^[a-z0-9]+/, 'Musí obsahovať iba malé písmená a čísla')\n            .required('Povinná položka'),\n        firstName: yup\n            .string()\n            .defined()\n            .trim()\n            .transform((val) => (val === '' ? null : val))\n            .min(3, 'Musia byť minimálne 3 znaky')\n            .max(50, 'Musí byť maximálne 50 znakov')\n            .default(null)\n            .nullable(),\n        lastName: yup\n            .string()\n            .defined()\n            .trim()\n            .transform((val) => (val === '' ? null : val))\n            .min(3, 'Musia byť minimálne 3 znaky')\n            .max(50, 'Musí byť maximálne 50 znakov')\n            .default(null)\n            .nullable(),\n        email: yup.string().trim().max(320, 'Musí mať maximálne 320 znakov').required('Povinná položka'),\n        password: yup\n            .string()\n            .trim()\n            .defined()\n            .min(8, 'Musí byť minimálne 8 znakov')\n            .max(255, 'Musí byť maximálne 255 znakov')\n            .matches(\n                /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/,\n                'Musí obsahovať aspoň jedno malé písmeno, jedno veľké písmeno a jedno číslo'\n            )\n            .nullable(),\n        confirmPassword: yup\n            .string()\n            .trim()\n            .equals([yup.ref('password')], 'Zadané heslá sa nezhodujú')\n            .required('Povinná položka'),\n        roles: yup\n            .array()\n            .defined()\n            .of(\n                yup.object({\n                    value: yup.mixed<Api.CreateUser.RoleEnum>().defined().oneOf(Object.values(Api.CreateUser.RoleEnum)),\n                    name: yup.string().defined()\n                })\n            )\n            .min(1, 'Musí byť minimálne jedna rola')\n            .required(),\n        notifications: yup.boolean().required('Povinná položka')\n    })\n    .required();\n\nconst UserPage: React.FC = () => {\n    const uniqueId = useId();\n    const [error, setError] = useState<string>();\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n    const [isUserConfirmed, setIsUserConfirmed] = useState<boolean>(false);\n    const [emailWasSend, setEmailWasSend] = useState<boolean>(false);\n    const navigate = useNavigate();\n    const params = useParams();\n\n    const methods = useForm<UserForm>({\n        resolver: yupResolver(schema),\n        defaultValues: {\n            roles: []\n        }\n    });\n\n    const {\n        formState: { isSubmitting, errors },\n        control\n    } = methods;\n\n    useEffect(() => {\n        if (params.id) {\n            const controller = new AbortController();\n            const paramsNumber = params?.id;\n            (async () => {\n                try {\n                    setIsLoading(true);\n                    const data = await userApi.getUser(parseInt(paramsNumber), { signal: controller.signal });\n                    setIsUserConfirmed(data.confirmed);\n                    const receivedRoles = data.roles.map((role) => {\n                        return {\n                            value: role,\n                            name: getRoleLabel[role]\n                        };\n                    });\n\n                    const formattedData: UserForm = {\n                        ...data,\n                        password: '',\n                        confirmPassword: '',\n                        roles: receivedRoles\n                    };\n                    methods.reset(formattedData);\n                } catch (err) {\n                    formatErrorMessage(err).then((message) => setError(message));\n                } finally {\n                    setIsLoading(false);\n                }\n            })();\n            return () => controller.abort();\n        }\n    }, [params.id, methods]);\n\n    const cancelHandler = () => {\n        navigate('/users');\n    };\n\n    const confirmHandler = async () => {\n        if (params.id) {\n            await userApi.resendConfirmation(+params.id);\n            setEmailWasSend(true);\n        }\n    };\n\n    const submitHandler: SubmitHandler<UserForm> = async (data: UserForm) => {\n        const sendData = {\n            ...data,\n            roles: data.roles.map((role) => role.value)\n        };\n        try {\n            if (params.id) {\n                await userApi.updateUser(parseInt(params.id), sendData as Api.UpdateUser);\n            } else {\n                await userApi.createUser(sendData as Api.CreateUser);\n            }\n            navigate('/users');\n        } catch (err) {\n            formatErrorMessage(err).then((message) => setError(message));\n        }\n    };\n\n    const rolesErrorMessage = get(errors, 'roles')?.message;\n\n    return (\n        <div className='row justify-content-center'>\n            <div className='col-lg-6 pt-3'>\n                <h1>Používateľ</h1>\n                <FormProvider {...methods}>\n                    <Form\n                        noValidate\n                        onSubmit={methods.handleSubmit(submitHandler)}\n                    >\n                        <Input\n                            name='username'\n                            label='Používateľské meno'\n                        />\n                        <Input\n                            name='firstName'\n                            label='Meno'\n                        />\n                        <Input\n                            name='lastName'\n                            label='Priezvisko'\n                        />\n                        <Input\n                            name='email'\n                            label='E-mail'\n                        />\n                        <Input\n                            name='password'\n                            label='Heslo'\n                        />\n                        <Input\n                            name='confirmPassword'\n                            label='Potvrdenie hesla'\n                        />\n                        <Form.Group className='mb-3'>\n                            <Form.Label htmlFor='tagsMultiselection'>Používateľské role</Form.Label>\n                            <Controller\n                                control={control}\n                                name='roles'\n                                render={({ field: { onChange, value } }) => (\n                                    <Typeahead\n                                        id={uniqueId + 'roles'}\n                                        labelKey='name'\n                                        onChange={onChange}\n                                        options={roleOptions}\n                                        placeholder='Vyberte ľubovoľný počet rolí'\n                                        selected={value}\n                                        isInvalid={!!rolesErrorMessage}\n                                        multiple\n                                    />\n                                )}\n                            />\n                            <Form.Control.Feedback type='invalid'>{rolesErrorMessage?.toString()}</Form.Control.Feedback>\n                        </Form.Group>\n                        <Checkbox\n                            name='notifications'\n                            label='Posielať notifikácie e-mailom'\n                        />\n                        <Stack\n                            direction='horizontal'\n                            gap={2}\n                        >\n                            <Button\n                                variant='primary'\n                                type='submit'\n                            >\n                                {params.id ? 'Zmeniť používateľa' : 'Vytvoriť používateľa'}\n                            </Button>{' '}\n                            {!isUserConfirmed && (\n                                <Button\n                                    variant='secondary'\n                                    type='button'\n                                    onClick={confirmHandler}\n                                >\n                                    Poslať potvrdzujúci e-mail\n                                </Button>\n                            )}\n                            <Button\n                                variant='warning'\n                                type='button'\n                                onClick={cancelHandler}\n                            >\n                                Zrušiť\n                            </Button>\n                        </Stack>\n                    </Form>\n                </FormProvider>\n            </div>\n            <Modal\n                show={!!error}\n                message={error}\n                type='error'\n                onClose={() => {\n                    setError(undefined);\n                }}\n            />\n            <Modal\n                show={emailWasSend}\n                message='Potvrdzujúci e-mail bol zaslaný používateľovi.'\n                type='info'\n                onClose={() => {\n                    setEmailWasSend(false);\n                }}\n            />\n            <Spinner show={isSubmitting || isLoading} />\n        </div>\n    );\n};\n\nexport default UserPage;\n"],"names":["roleOptions","Api","schema","yup.object","yup.string","val","yup.ref","yup.array","yup.mixed","yup.boolean","UserPage","uniqueId","useId","error","setError","useState","isLoading","setIsLoading","isUserConfirmed","setIsUserConfirmed","emailWasSend","setEmailWasSend","navigate","useNavigate","params","useParams","methods","useForm","yupResolver","isSubmitting","errors","control","useEffect","controller","paramsNumber","data","userApi","receivedRoles","role","getRoleLabel","formattedData","err","formatErrorMessage","message","cancelHandler","confirmHandler","submitHandler","sendData","rolesErrorMessage","get","jsxs","jsx","FormProvider","Form","Input","Controller","onChange","value","Typeahead","Checkbox","Stack","Button","Modal","Spinner"],"mappings":"kOAwBA,MAAMA,EAAc,CAChB,CAAE,MAAOC,EAAI,KAAK,SAAS,MAAO,KAAM,eAAgB,EACxD,CACI,MAAOA,EAAI,KAAK,SAAS,QACzB,KAAM,eAAA,CAEd,EAEMC,GAASC,EACH,CACJ,SAAUC,EACL,EACA,KAAK,EACL,IAAI,EAAG,6BAA6B,EACpC,IAAI,GAAI,8BAA8B,EACtC,QAAQ,aAAc,yCAAyC,EAC/D,SAAS,iBAAiB,EAC/B,UAAWA,EACN,EACA,QAAA,EACA,KAAA,EACA,UAAWC,GAASA,IAAQ,GAAK,KAAOA,CAAI,EAC5C,IAAI,EAAG,6BAA6B,EACpC,IAAI,GAAI,8BAA8B,EACtC,QAAQ,IAAI,EACZ,SAAS,EACd,SAAUD,EACL,EACA,QAAA,EACA,KAAA,EACA,UAAWC,GAASA,IAAQ,GAAK,KAAOA,CAAI,EAC5C,IAAI,EAAG,6BAA6B,EACpC,IAAI,GAAI,8BAA8B,EACtC,QAAQ,IAAI,EACZ,SAAS,EACd,MAAOD,IAAa,OAAO,IAAI,IAAK,+BAA+B,EAAE,SAAS,iBAAiB,EAC/F,SAAUA,EACE,EACP,KACA,EAAA,QAAA,EACA,IAAI,EAAG,6BAA6B,EACpC,IAAI,IAAK,+BAA+B,EACxC,QACG,8CACA,8EAEH,SAAS,EACd,gBAAiBA,EACZ,EACA,KAAA,EACA,OAAO,CAACE,EAAQ,UAAU,CAAC,EAAG,2BAA2B,EACzD,SAAS,iBAAiB,EAC/B,MAAOC,EACI,EACN,UACA,GACGJ,EAAW,CACP,MAAOK,EAAmC,EAAE,QAAQ,EAAE,MAAM,OAAO,OAAOP,EAAI,WAAW,QAAQ,CAAC,EAClG,KAAMG,EAAW,EAAE,QAAQ,CAC9B,CAAA,CAEJ,EAAA,IAAI,EAAG,+BAA+B,EACtC,SAAS,EACd,cAAeK,IAAc,SAAS,iBAAiB,CAC3D,CAAC,EACA,SAAS,EAERC,GAAqB,IAAM,OAC7B,MAAMC,EAAWC,EAAAA,MAAM,EACjB,CAACC,EAAOC,CAAQ,EAAIC,WAAiB,EACrC,CAACC,EAAWC,CAAY,EAAIF,EAAAA,SAAkB,EAAK,EACnD,CAACG,EAAiBC,CAAkB,EAAIJ,EAAAA,SAAkB,EAAK,EAC/D,CAACK,EAAcC,CAAe,EAAIN,EAAAA,SAAkB,EAAK,EACzDO,EAAWC,EAAY,EACvBC,EAASC,EAAU,EAEnBC,EAAUC,EAAkB,CAC9B,SAAUC,EAAY1B,EAAM,EAC5B,cAAe,CACX,MAAO,CAAA,CAAC,CACZ,CACH,EAEK,CACF,UAAW,CAAE,aAAA2B,EAAc,OAAAC,CAAO,EAClC,QAAAC,CAAA,EACAL,EAEJM,EAAAA,UAAU,IAAM,CACZ,GAAIR,EAAO,GAAI,CACL,MAAAS,EAAa,IAAI,gBACjBC,EAAeV,GAAA,YAAAA,EAAQ,GAC7B,OAAC,SAAY,CACL,GAAA,CACAP,EAAa,EAAI,EACX,MAAAkB,EAAO,MAAMC,EAAQ,QAAQ,SAASF,CAAY,EAAG,CAAE,OAAQD,EAAW,OAAQ,EACxFd,EAAmBgB,EAAK,SAAS,EACjC,MAAME,EAAgBF,EAAK,MAAM,IAAKG,IAC3B,CACH,MAAOA,EACP,KAAMC,EAAaD,CAAI,CAC3B,EACH,EAEKE,EAA0B,CAC5B,GAAGL,EACH,SAAU,GACV,gBAAiB,GACjB,MAAOE,CACX,EACAX,EAAQ,MAAMc,CAAa,QACtBC,EAAK,CACVC,EAAmBD,CAAG,EAAE,KAAME,GAAY7B,EAAS6B,CAAO,CAAC,CAAA,QAC7D,CACE1B,EAAa,EAAK,CAAA,CACtB,GACD,EACI,IAAMgB,EAAW,MAAM,CAAA,CAEnC,EAAA,CAACT,EAAO,GAAIE,CAAO,CAAC,EAEvB,MAAMkB,EAAgB,IAAM,CACxBtB,EAAS,QAAQ,CACrB,EAEMuB,EAAiB,SAAY,CAC3BrB,EAAO,KACP,MAAMY,EAAQ,mBAAmB,CAACZ,EAAO,EAAE,EAC3CH,EAAgB,EAAI,EAE5B,EAEMyB,EAAyC,MAAOX,GAAmB,CACrE,MAAMY,EAAW,CACb,GAAGZ,EACH,MAAOA,EAAK,MAAM,IAAKG,GAASA,EAAK,KAAK,CAC9C,EACI,GAAA,CACId,EAAO,GACP,MAAMY,EAAQ,WAAW,SAASZ,EAAO,EAAE,EAAGuB,CAA0B,EAElE,MAAAX,EAAQ,WAAWW,CAA0B,EAEvDzB,EAAS,QAAQ,QACZmB,EAAK,CACVC,EAAmBD,CAAG,EAAE,KAAME,GAAY7B,EAAS6B,CAAO,CAAC,CAAA,CAEnE,EAEMK,GAAoBC,EAAAA,EAAA,IAAInB,EAAQ,OAAO,IAAnBmB,YAAAA,EAAsB,QAG5C,OAAAC,EAAA,KAAC,MAAI,CAAA,UAAU,6BACX,SAAA,CAACA,EAAAA,KAAA,MAAA,CAAI,UAAU,gBACX,SAAA,CAAAC,EAAAA,IAAC,MAAG,SAAU,YAAA,CAAA,EACdA,EAAAA,IAACC,EAAc,CAAA,GAAG1B,EACd,SAAAwB,EAAA,KAACG,EAAA,CACG,WAAU,GACV,SAAU3B,EAAQ,aAAaoB,CAAa,EAE5C,SAAA,CAAAK,EAAA,IAACG,EAAA,CACG,KAAK,WACL,MAAM,oBAAA,CACV,EACAH,EAAA,IAACG,EAAA,CACG,KAAK,YACL,MAAM,MAAA,CACV,EACAH,EAAA,IAACG,EAAA,CACG,KAAK,WACL,MAAM,YAAA,CACV,EACAH,EAAA,IAACG,EAAA,CACG,KAAK,QACL,MAAM,QAAA,CACV,EACAH,EAAA,IAACG,EAAA,CACG,KAAK,WACL,MAAM,OAAA,CACV,EACAH,EAAA,IAACG,EAAA,CACG,KAAK,kBACL,MAAM,kBAAA,CACV,EACCJ,EAAA,KAAAG,EAAK,MAAL,CAAW,UAAU,OAClB,SAAA,CAAAF,EAAA,IAACE,EAAK,MAAL,CAAW,QAAQ,qBAAqB,SAAkB,qBAAA,EAC3DF,EAAA,IAACI,EAAA,CACG,QAAAxB,EACA,KAAK,QACL,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAAyB,EAAU,MAAAC,MAC1BN,EAAA,IAACO,EAAA,CACG,GAAI/C,EAAW,QACf,SAAS,OACT,SAAA6C,EACA,QAASxD,EACT,YAAY,+BACZ,SAAUyD,EACV,UAAW,CAAC,CAACT,EACb,SAAQ,EAAA,CAAA,CACZ,CAER,EACAG,MAACE,EAAK,QAAQ,SAAb,CAAsB,KAAK,UAAW,SAAmBL,GAAA,YAAAA,EAAA,UAAW,CAAA,CAAA,EACzE,EACAG,EAAA,IAACQ,EAAA,CACG,KAAK,gBACL,MAAM,+BAAA,CACV,EACAT,EAAA,KAACU,EAAA,CACG,UAAU,aACV,IAAK,EAEL,SAAA,CAAAT,EAAA,IAACU,EAAA,CACG,QAAQ,UACR,KAAK,SAEJ,SAAArC,EAAO,GAAK,qBAAuB,sBAAA,CACxC,EAAU,IACT,CAACN,GACEiC,EAAA,IAACU,EAAA,CACG,QAAQ,YACR,KAAK,SACL,QAAShB,EACZ,SAAA,4BAAA,CAED,EAEJM,EAAA,IAACU,EAAA,CACG,QAAQ,UACR,KAAK,SACL,QAASjB,EACZ,SAAA,QAAA,CAAA,CAED,CAAA,CAAA,CACJ,CAAA,CAAA,CAER,CAAA,CAAA,EACJ,EACAO,EAAA,IAACW,EAAA,CACG,KAAM,CAAC,CAACjD,EACR,QAASA,EACT,KAAK,QACL,QAAS,IAAM,CACXC,EAAS,MAAS,CAAA,CACtB,CACJ,EACAqC,EAAA,IAACW,EAAA,CACG,KAAM1C,EACN,QAAQ,iDACR,KAAK,OACL,QAAS,IAAM,CACXC,EAAgB,EAAK,CAAA,CACzB,CACJ,EACC8B,EAAAA,IAAAY,EAAA,CAAQ,KAAMlC,GAAgBb,CAAW,CAAA,CAAA,EAC9C,CAER"}